<%@ page pageEncoding="UTF-8" %>
<html>
<html>

<head>
<meta charset="UTF-8">
<title>Design Patterns</title>
<link href="books.ico" rel="shortcut icon" type="ico">
</head>
<style type="text/css">
body {
    background-color: gray;
}

#first {
    background-color: #90B4D6;
    width: 300px;
    color: white;
    text-transform: uppercase;
}
#second {
    background-color: #90B4D6;
    width: 1400px;
    color: white;
    text-transform: uppercase;
}

h1 {
    padding-top: 30px;
    padding-left: 500px;
    text-transform: uppercase
}
h3 {
    padding-left: 300px;
}

h4 {
    color: white;
padding-left: 50px;
}

table {
    color: #333333;
    border-spacing: 0;
    margin-left: 50px;
}

th {
    padding: 10px;
     border: violet;
}

tr:nth-child(even) td {
    background-color: #84b3ad;
}

tr:nth-child(odd) td {
    background-color: #689ad8;
}

p {
    color: white;
    padding-left: 100px;
    padding-right: 100px;
}
</style>
<body>
    <h1>Шаблони за дизайн</h1>

    <p>
        &diams;&emsp;Шаблоните за дизайн (англ: Software design pattern) представляват концепция предназначена за разрешаване на често срещани проблеми в обектно-ориентираното програмиране. Тази концепция предлага стандартни решения за архитектурни и концептуални проблеми в компютърното програмиране.
    </p>

    <p>
        &diams;&emsp;Тук не става въпрос за конкренти алгоритми или част от програмен код. Шаблоните за дизайн са независими от програмния език. Те представляват архитектурни решения на вече познати и много често срещани проблеми в програмирането. Може да се каже, че шаблоните за дизайн представляват средство за прилагане на световния опит на програмисти и аналитици.
    </p>


    <table>
        <h3>Създаващи шаблони</h3>
        <tr id="first-row">
            <th id="first">Наименование</th>
            <th id="second">Описание</th>
        </tr>
        <tr class="green-background">
            <td>Абстрактна Фабрика (Abstract Factory)</td>
            <td>Предоставя интерфейс за създаване на семейства от обекти без да са посочени техните конкретни класове.</td>
        </tr>
        <tr class="blue-background">
            <td>Метод Фабрика (Factory method)</td>
            <td>Дефинира интерфейс за създаване на обекти, но оставя на подкласовете да решат от кои класове да направят инстанции.</td>
        </tr>
        <tr class="green-background">
            <td>Строител (Builder)</td>
            <td>Разделя създаването на сложен обект от неговото представяне, така че един и същи процес да може да създава обекти с различно представяне.</td>
        </tr>
        <tr class="blue-background">
            <td>Късна инициализация (Lazy initialization)</td>
            <td>Отлагане във времето на създаването на обект, изчисляването на стойност или на някакъв друг отнемащ ресурси процес, до момента в който не е нужен.</td>
        </tr>
        <tr class="green-background">
            <td>Object pool</td>
            <td>Предотвратява скъпо заделяне или освобождаване на ресурс чрез рециклиране на обекти с кратък живот.</td>
        </tr>
        <tr class="blue-background">
            <td>Прототип (Prototype)</td>
            <td>Определя прототипна инстанция на някакъв вид обект и създава нови обекти чрез копиране на прототипа.</td>
        </tr>
        <tr class="green-background">
            <td>Сек (Singleton)</td>
            <td>Осигурява клас, който може да има само една-единствена инстанция и предоставя глобален достъп до нея.</td>
        </tr>
    </table>
    <table>
        <h3>Структурни шаблони</h3>
        <tr id="first-row">
            <th id="first">Наименование</th>
            <th id="second">Описание</th>
        </tr>
        <tr class="green-background">
            <td>Адаптер (Adapter)</td>
            <td>Конвертира интерфейса на даден клас към друг интерфейс, който е очакван от клиента. Адаптерът оставя класовете да работят заедно. Това е необходимо заради несъвместимостта им.</td>

        </tr>
        <tr class="blue-background">
            <td>Мост (Bridge)</td>
            <td>Отделя абстракцията от нейната имплементация, така че двете могат да бъдат променяни независимо.</td>

        </tr>
        <tr class="green-background">
            <td>Композиция (Composite)</td>
            <td>Композиране на обекти в дървовидни структури за представяне на йерархии от елементи.</td>
        </tr>
        <tr class="blue-background">
            <td>Декоратор (Decorator)</td>
            <td>	Динамично добавя допълнителни отговорности на обект, като запазва интерфейса му. Декораторите предоставят гъвкава алтернатива на наследяването за разширяване на функционалността.</td>
        </tr>
        <tr class="green-background">
            <td>Фасада (Facade)</td>
            <td>Предоставя уеднаквен интерфейс за редица интерфейси. Фасадата дефинира интерфейс от по-високо ниво, което прави по-лесна употребата на подсистемата.</td>
        </tr>
        <tr class="green-background">
            <td>Миниобект (Flyweight)</td>
            <td>Използва поделяне за ефективна поддръжка на голям брой малки обекти.</td>
        </tr>
        <tr class="green-background">
            <td>Пълномощно (Proxy)</td>
            <td>Предоставя заместник на друг обект, за да се контролира достъпа до него.</td>
        </tr>
    </table>
    <table>
        <h3>Поведенчески шаблони</h3>
        <tr id="first-row">
            <th id="first">Наименование</th>
            <th id="second">Описание</th>
        </tr>
        <tr class="green-background">
            <td>Верига отговорности (Chain of Responsibility)</td>
            <td>Избягва обвързването на изпращача на дадена заявка с получателя ѝ, като дава възможност на няколко oбекта да обработят заявката. Свързва заедно приемащите обекти и предава заявката по веригата, докато някой от тях я обработи.</td>
        </tr>
        <tr class="blue-background">
            <td>Команда (Command)</td>
            <td>Капсулира дадена заявка във вид на обект. Това позволява свързването на клиента с различни заявки или опашки, както и поддръжка на функция за връщане на промените (undo).</td>
        </tr>
        <tr class="green-background">
            <td>Интерпретатор (Interpreter)</td>
            <td>Даден език дефинира своята граматика, също така и интерпретатор, който използва граматиката, за да интерпретира изречения написани на този език.</td>
        </tr>
        <tr class="blue-background">
            <td>Итератор (Iterator)</td>
            <td>Предоставя начин за последователен достъп до елементите на обект, без да е нужна вътрешна информация за обекта.</td>
        </tr>
        <tr class="green-background">
            <td>Посредник (Mediator)</td>
            <td>Дефинира обект който капсулира връзките между списък от обекти. Медиаторът поддържа шаблона Разхлабени връзки (loose coupling) като предпазва директно обвързване между обектите, давайки възможност това да се случва на по-високо ниво.</td>
        </tr>
        <tr class="blue-background">
            <td>Спомен (Memento)</td>
            <td>Без да нарушава капсулацията на даден обект, прихваща и изважда вътрешното му състояние с цел да бъде възвърнато това състояние в по-късен етап.</td>
        </tr>
        <tr class="green-background">
            <td>Празен обект (Null Object)</td>
            <td>Проектиран е да действа като стойност по подразбиране на даден обект.</td>
        </tr>
        <tr class="blue-background">
            <td>Наблюдател (Observer)</td>
            <td>Дефинира зависимост „един към много“ между обектите, така че ако един обект промени състоянието си, всички зависими от него обекти да бъдат известени и обновени автоматично.</td>
        </tr>
        <tr class="green-background">
            <td>Състояние (State)</td>
            <td>Позволява на даден обект да променя поведението си при промяна на вътрешното му състояние. Изглежда все едно обектът е променил класа си.</td>
        </tr>
        <tr class="blue-background">
            <td>Стратегия (Strategy)</td>
            <td>Дефинира семейство от капсулирани алгоритми и ги прави взаемозаменими. Стратегията позволява промяна на алгоритмите, независимо от клиента, който ги използва.</td>
        </tr>
        <tr class="green-background">
            <td>Спецификация (Specification)</td>
            <td></td>
        </tr>
        <tr class="blue-background">
            <td>Шаблонен метод (Template method)</td>
            <td>Дефинира скелет на алгоритъм в дадена операция, като оставя някои стъпки за подкласовете. Шаблонният метод позволява на подкласовете да предефинират някои стъпки на даден алгоритъм, без да променят структурата му.</td>
        </tr>
        <tr class="green-background">
            <td>Посетител (Visitor)</td>
            <td>Посетителят предоставя възможност за дефиниране на нова операция, без да се променя класа на елемента върху който се извършва операцията.</td>
        </tr>

    </table>

    <h4>Източници</h4>
    <p>https://bg.wikipedia.org<br>
        Шаблони за дизайн, Design Patterns – Ерик Гама, Ричард Хелм, Ралф Джонсън, 2005, издателство СофтПрес. ISBN 954-685-352-6</p>
</body>
</html>